import streamlit as st
import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import io
import base64
import pillow_heif

# ==============================
# C√°c h√†m x·ª≠ l√Ω c∆∞·ªùng ƒë·ªô s√°ng
# ==============================

def negative_image(img):
    """T·∫°o ·∫£nh √¢m"""
    if img is None:
        return None
    return 255 - img

def log_transform(img, c=1):
    """Bi·∫øn ƒë·ªïi logarit"""
    if img is None:
        return None
    img_float = img.astype(np.float32) / 255.0
    log_img = c * np.log(1 + img_float)
    log_img = np.uint8(255 * (log_img / np.max(log_img)))
    return log_img

def gamma_transform(img, gamma=1.0):
    """Bi·∫øn ƒë·ªïi gamma"""
    if img is None:
        return None
    img_float = img.astype(np.float32) / 255.0
    gamma_img = np.power(img_float, gamma)
    gamma_img = np.uint8(255 * gamma_img)
    return gamma_img

def piecewise_linear(img):
    """Bi·∫øn ƒë·ªïi piecewise-linear"""
    if img is None:
        return None
    # tƒÉng ƒë·ªô s√°ng v√πng t·ªëi, gi·∫£m ƒë·ªô s√°ng v√πng s√°ng
    img_float = img.astype(np.float32) / 255.0
    piecewise = np.piecewise(img_float,
                             [img_float < 0.3, (img_float >= 0.3) & (img_float < 0.7), img_float >= 0.7],
                             [lambda x: 0.5 * x, lambda x: x, lambda x: 0.2 + 0.8 * x])
    piecewise = np.uint8(255 * piecewise)
    return piecewise

# ==============================
# C√°c h√†m c√¢n b·∫±ng m·ª©c x√°m (Histogram Equalization)
# ==============================

def clahe_equalization(img, clip=2.0, tile=(8,8)):
    """C√¢n b·∫±ng histogram th√≠ch ·ª©ng (CLAHE)"""
    if img is None:
        return None
    clahe = cv2.createCLAHE(clipLimit=clip, tileGridSize=tile)
    return clahe.apply(img)

def hist_equalization(img):
    """C√¢n b·∫±ng histogram to√†n c·ª•c"""
    if img is None:
        return None
    return cv2.equalizeHist(img)

def custom_hist_equalization(img):
    """T·ª± vi·∫øt h√†m c√¢n b·∫±ng histogram"""
    if img is None:
        return None
    hist, bins = np.histogram(img.flatten(), 256, [0, 256])
    cdf = hist.cumsum()
    cdf_normalized = (cdf - cdf.min()) * 255 / (cdf.max() - cdf.min())
    cdf_normalized = cdf_normalized.astype(np.uint8)
    img_eq = cdf_normalized[img]
    return img_eq

# ==============================
# ·ª®ng d·ª•ng bi·∫øn ƒë·ªïi ·∫£nh c∆° b·∫£n trong th·ª±c t·∫ø: tƒÉng c∆∞·ªùng ch·∫•t l∆∞·ª£ng ·∫£nh
# ==============================

def preprocess_license_plate(img):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe"""
    # Chuy·ªÉn sang ·∫£nh x√°m
    if len(img.shape) == 3:
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    else:
        gray = img.copy()
    
    # C√¢n b·∫±ng histogram th√≠ch ·ª©ng
    eq = clahe_equalization(gray)
    
    # L√†m m·ªãn ·∫£nh(l·ªçc nhi·ªÖu)
    blur = cv2.GaussianBlur(eq, (3,3), 0)
    
    # TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n
    enhanced = cv2.convertScaleAbs(blur, alpha=1.2, beta=10)
    
    return enhanced

def enhance_satellite(img):
    """C·∫£i thi·ªán ·∫£nh v·ªá tinh trong GIS"""
    # Chuy·ªÉn sang LAB color space
    if len(img.shape) == 3:
        lab = cv2.cvtColor(img, cv2.COLOR_RGB2LAB)
        l, a, b = cv2.split(lab)
        
        # C√¢n b·∫±ng histogram cho k√™nh L (ƒë·ªô s√°ng)
        l_eq = clahe_equalization(l)
        
        # TƒÉng ƒë·ªô b√£o h√≤a cho k√™nh a v√† b
        a_enhanced = cv2.convertScaleAbs(a, alpha=1.3, beta=0)
        b_enhanced = cv2.convertScaleAbs(b, alpha=1.3, beta=0)
        
        # Gh√©p l·∫°i
        merged = cv2.merge((l_eq, a_enhanced, b_enhanced))
        return cv2.cvtColor(merged, cv2.COLOR_LAB2RGB)
    else:
        # N·∫øu l√† ·∫£nh x√°m
        return clahe_equalization(img)

def enhance_low_light(img):
    """N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p trong ƒëi·ªÅu ki·ªán √°nh s√°ng k√©m"""
    if len(img.shape) == 3:
        # Chuy·ªÉn sang HSV
        hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
        h, s, v = cv2.split(hsv)
        
        # C√¢n b·∫±ng histogram cho k√™nh V (ƒë·ªô s√°ng)
        v_eq = clahe_equalization(v)
        
        # TƒÉng ƒë·ªô b√£o h√≤a
        s_enhanced = cv2.convertScaleAbs(s, alpha=1.2, beta=0)
        
        # Gh√©p l·∫°i
        final = cv2.merge((h, s_enhanced, v_eq))
        return cv2.cvtColor(final, cv2.COLOR_HSV2RGB)
    else:
        # N·∫øu l√† ·∫£nh x√°m
        return clahe_equalization(img)




# ==============================
# Utility Functions
# ==============================

def load_image(uploaded_file):
    """Load ·∫£nh t·ª´ file upload, h·ªó tr·ª£ HEIC"""
    try:
        # Ki·ªÉm tra n·∫øu l√† file HEIC
        if uploaded_file.name.lower().endswith(('.heic', '.heif')):
            # S·ª≠ d·ª•ng pillow-heif ƒë·ªÉ ƒë·ªçc HEIC
            heif_file = pillow_heif.read_heif(uploaded_file.read())
            image = Image.frombytes(
                heif_file.mode, 
                heif_file.size, 
                heif_file.data, 
                "raw", 
                heif_file.mode, 
                heif_file.stride,
            )
            # Chuy·ªÉn sang RGB n·∫øu c·∫ßn
            if image.mode != 'RGB':
                image = image.convert('RGB')
            # Chuy·ªÉn sang numpy array
            image_array = np.array(image)
            return image_array
        else:
            # X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng kh√°c
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            if image is not None:
                return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            else:
                return None
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")
        return None

def plot_comparison(original, processed, title):
    """V·∫Ω so s√°nh ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ x·ª≠ l√Ω"""
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))
    
    if len(original.shape) == 3:
        axes[0].imshow(original)
    else:
        axes[0].imshow(original, cmap='gray')
    axes[0].set_title('·∫¢nh g·ªëc')
    axes[0].axis('off')
    
    if len(processed.shape) == 3:
        axes[1].imshow(processed)
    else:
        axes[1].imshow(processed, cmap='gray')
    axes[1].set_title(title)
    axes[1].axis('off')
    
    plt.tight_layout()
    return fig

def plot_histogram_comparison(original, processed, title):
    """V·∫Ω so s√°nh histogram tr∆∞·ªõc v√† sau x·ª≠ l√Ω"""
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    
    # ·∫¢nh g·ªëc
    if len(original.shape) == 3:
        axes[0,0].imshow(original)
    else:
        axes[0,0].imshow(original, cmap='gray')
    axes[0,0].set_title('·∫¢nh g·ªëc')
    axes[0,0].axis('off')
    
    # ·∫¢nh ƒë√£ x·ª≠ l√Ω
    if len(processed.shape) == 3:
        axes[0,1].imshow(processed)
    else:
        axes[0,1].imshow(processed, cmap='gray')
    axes[0,1].set_title(title)
    axes[0,1].axis('off')
    
    # Histogram ·∫£nh g·ªëc
    if len(original.shape) == 3:
        gray_orig = cv2.cvtColor(original, cv2.COLOR_RGB2GRAY)
    else:
        gray_orig = original.copy()
    hist_orig = cv2.calcHist([gray_orig], [0], None, [256], [0, 256])
    axes[1,0].plot(hist_orig, color='blue', alpha=0.7)
    axes[1,0].set_title('Histogram ·∫£nh g·ªëc')
    axes[1,0].set_xlabel('M·ª©c x√°m')
    axes[1,0].set_ylabel('S·ªë pixel')
    axes[1,0].grid(True, alpha=0.3)
    
    # Histogram ·∫£nh ƒë√£ x·ª≠ l√Ω
    if len(processed.shape) == 3:
        gray_proc = cv2.cvtColor(processed, cv2.COLOR_RGB2GRAY)
    else:
        gray_proc = processed.copy()
    hist_proc = cv2.calcHist([gray_proc], [0], None, [256], [0, 256])
    axes[1,1].plot(hist_proc, color='red', alpha=0.7)
    axes[1,1].set_title('Histogram ·∫£nh ƒë√£ x·ª≠ l√Ω')
    axes[1,1].set_xlabel('M·ª©c x√°m')
    axes[1,1].set_ylabel('S·ªë pixel')
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def get_image_download_link(img, filename, text):
    """T·∫°o link download cho ·∫£nh"""
    if len(img.shape) == 3:
        img_pil = Image.fromarray(img)
    else:
        img_pil = Image.fromarray(img, mode='L')
    
    buf = io.BytesIO()
    img_pil.save(buf, format='PNG')
    buf.seek(0)
    
    b64 = base64.b64encode(buf.getvalue()).decode()
    href = f'<a href="data:image/png;base64,{b64}" download="{filename}">{text}</a>'
    return href

# ==============================
# Main App
# ==============================

def main():
    st.set_page_config(
        page_title="·ª®ng d·ª•ng X·ª≠ l√Ω ·∫¢nh - Ti·ªÉu lu·∫≠n 1",
        page_icon="üñºÔ∏è",
        layout="wide"
    )
    
    st.title("üñºÔ∏è ·ª®ng d·ª•ng X·ª≠ l√Ω ·∫¢nh - Ti·ªÉu lu·∫≠n 1")
    st.markdown("**X·ª≠ l√Ω ·∫£nh d·ª±a tr√™n gi√° tr·ªã ƒëi·ªÉm ·∫£nh (Point Processing) - Ph·∫ßn 3: ·ª®ng d·ª•ng th·ª±c t·∫ø**")
    
    st.markdown("---")
    
    # Sidebar
    st.sidebar.header("üìÅ T·∫£i ·∫£nh l√™n")
    uploaded_file = st.sidebar.file_uploader(
        "Ch·ªçn file ·∫£nh",
        type=['png', 'jpg', 'jpeg', 'bmp', 'tiff', 'heic', 'heif'],
        help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: PNG, JPG, JPEG, BMP, TIFF, HEIC, HEIF"
    )
    
    st.sidebar.markdown("---")
    st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t")
    
    # Main content
    if uploaded_file is not None:
        # ƒê·ªçc ·∫£nh
        image = load_image(uploaded_file)
        
        if image is None:
            st.error("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh. Vui l√≤ng th·ª≠ file kh√°c.")
            return
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.subheader("üì∏ ·∫¢nh g·ªëc")
            st.image(image, caption="·∫¢nh g·ªëc", use_container_width=True)
            
        
        with col2:
            st.subheader("üîç Th√¥ng tin ·∫£nh")
            
            # Chuy·ªÉn sang ·∫£nh x√°m ƒë·ªÉ ph√¢n t√≠ch
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            else:
                gray = image.copy()
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ ·∫£nh
            st.write(f"**üìè K√≠ch th∆∞·ªõc:** {image.shape[1]} √ó {image.shape[0]} pixels")
            st.write(f"**üé® Lo·∫°i ·∫£nh:** {'M√†u RGB' if len(image.shape) == 3 else '·∫¢nh x√°m'}")
            st.write(f"**üî¢ S·ªë k√™nh m√†u:** {image.shape[2] if len(image.shape) == 3 else 1}")
            st.write(f"**üíæ Ki·ªÉu d·ªØ li·ªáu:** {image.dtype}")
            st.write(f"**üìä Ph·∫°m vi gi√° tr·ªã:** {image.min()} - {image.max()}")
            st.write(f"**üìÅ ƒê·ªãnh d·∫°ng file:** {uploaded_file.name.split('.')[-1].upper()}")
            
            # Th·ªëng k√™ c∆° b·∫£n
            st.markdown("**üìà Th·ªëng k√™ c∆° b·∫£n:**")
            col2a, col2b = st.columns(2)
            with col2a:
                st.metric("ƒê·ªô s√°ng trung b√¨nh", f"{np.mean(gray):.1f}")
                st.metric("ƒê·ªô t∆∞∆°ng ph·∫£n (std)", f"{np.std(gray):.1f}")
            with col2b:
                st.metric("ƒê·ªô s√°ng min", f"{np.min(gray)}")
                st.metric("ƒê·ªô s√°ng max", f"{np.max(gray)}")
        
            
        
        st.markdown("---")
        
        # Ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω
        st.subheader("üõ†Ô∏è Ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω")
        
        # Nh√≥m c√°c ch·ª©c nƒÉng x·ª≠ l√Ω c∆° b·∫£n
        basic_processing = {
            "üîÑ ·∫¢nh √¢m (Negative)": negative_image,
            "üìä Bi·∫øn ƒë·ªïi Logarit": log_transform,
            "‚ö° Bi·∫øn ƒë·ªïi Gamma": gamma_transform,
            "üìà Bi·∫øn ƒë·ªïi Piecewise-linear": piecewise_linear,
        }
        
        # Nh√≥m c√°c ch·ª©c nƒÉng c√¢n b·∫±ng histogram
        histogram_processing = {
            "üìä C√¢n b·∫±ng Histogram to√†n c·ª•c": hist_equalization,
            "üéØ C√¢n b·∫±ng Histogram th√≠ch ·ª©ng (CLAHE)": clahe_equalization,
            "‚úèÔ∏è T·ª± vi·∫øt h√†m c√¢n b·∫±ng Histogram": custom_hist_equalization,
        }
        
        # Nh√≥m c√°c ch·ª©c nƒÉng ·ª©ng d·ª•ng th·ª±c t·∫ø
        application_processing = {
            "üöó Ti·ªÅn x·ª≠ l√Ω ·∫£nh bi·ªÉn s·ªë xe": preprocess_license_plate,
            "üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS": enhance_satellite,
            "üåô N√¢ng cao ·∫£nh √°nh s√°ng k√©m": enhance_low_light,
        }
        
        # T·∫°o selectbox v·ªõi c√°c nh√≥m ch·ª©c nƒÉng
        st.markdown("**üîß X·ª≠ l√Ω ·∫£nh c∆° b·∫£n:**")
        basic_option = st.selectbox(
            "Ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω c∆° b·∫£n:",
            ["Kh√¥ng ch·ªçn"] + list(basic_processing.keys())
        )
        
        # Th√™m thanh tr∆∞·ª£t cho gamma n·∫øu ch·ªçn bi·∫øn ƒë·ªïi gamma
        gamma_value = 1.0
        if basic_option == "‚ö° Bi·∫øn ƒë·ªïi Gamma":
            gamma_value = st.slider(
                "Ch·ªçn ch·ªâ s·ªë Gamma (Œ≥):",
                min_value=0.1,
                max_value=3.0,
                value=1.0,
                step=0.1,
                help="Œ≥ < 1: tƒÉng ƒë·ªô s√°ng, Œ≥ > 1: gi·∫£m ƒë·ªô s√°ng, Œ≥ = 1: kh√¥ng thay ƒë·ªïi"
            )
            st.write(f"**Gi√° tr·ªã Gamma hi·ªán t·∫°i:** {gamma_value}")
        
        st.markdown("**üìä C√¢n b·∫±ng Histogram:**")
        histogram_option = st.selectbox(
            "Ch·ªçn ch·ª©c nƒÉng c√¢n b·∫±ng histogram:",
            ["Kh√¥ng ch·ªçn"] + list(histogram_processing.keys())
        )
        
        st.markdown("**üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø:**")
        app_option = st.selectbox(
            "Ch·ªçn ch·ª©c nƒÉng ·ª©ng d·ª•ng:",
            ["Kh√¥ng ch·ªçn"] + list(application_processing.keys())
        )
        
        # Hi·ªÉn th·ªã l√Ω thuy·∫øt cho c√°c ch·ª©c nƒÉng ƒë∆∞·ª£c ch·ªçn
        st.markdown("---")
        st.subheader("üìö L√Ω thuy·∫øt v√† Ph√¢n t√≠ch")
        
        # L√Ω thuy·∫øt cho x·ª≠ l√Ω ·∫£nh c∆° b·∫£n
        if basic_option != "Kh√¥ng ch·ªçn":
            if "Negative" in basic_option:
                st.info(f"""
                **{basic_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = 255 - r
                Trong ƒë√≥: r l√† gi√° tr·ªã pixel g·ªëc, s l√† gi√° tr·ªã pixel sau x·ª≠ l√Ω
                
                
                **‚ú® √ù nghƒ©a:** L√†m n·ªïi chi ti·∫øt ·ªü v√πng s√°ng (x-quang, ·∫£nh y khoa).

                """)
            elif "Logarit" in basic_option:
                st.info(f"""
                **{basic_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = c √ó log(1 + r)
                Trong ƒë√≥: c l√† h·∫±ng s·ªë, r l√† gi√° tr·ªã pixel g·ªëc (0-255)
                
                
                **‚ú® √ù nghƒ©a:** N·ªïi b·∫≠t v√πng t·ªëi, n√©n v√πng qu√° s√°ng (·∫£nh thi√™n vƒÉn, v·ªá tinh).

                """)
            elif "Gamma" in basic_option:
                st.info(f"""
                **{basic_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = c √ó r^Œ≥
                Trong ƒë√≥: c l√† h·∫±ng s·ªë, Œ≥ = {gamma_value} (h·ªá s·ªë gamma), r l√† gi√° tr·ªã pixel g·ªëc
                
                
                **‚ú® √ù nghƒ©a:** ƒêi·ªÅu ch·ªânh theo ƒë·∫∑c t√≠nh hi·ªÉn th·ªã & c·∫£m nh·∫≠n th·ªã gi√°c.

                """)
            elif "Piecewise" in basic_option:
                st.info(f"""
                **{basic_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = f(r) v·ªõi f(r) l√† h√†m t·ª´ng ƒëo·∫°n
                - r < 0.3: s = 0.5 √ó r (tƒÉng ƒë·ªô s√°ng v√πng t·ªëi)
                - 0.3 ‚â§ r < 0.7: s = r (gi·ªØ nguy√™n)
                - r ‚â• 0.7: s = 0.2 + 0.8 √ó r (gi·∫£m ƒë·ªô s√°ng v√πng s√°ng)
                
                
                **‚ú® √ù nghƒ©a:** L√†m r√µ chi ti·∫øt trong kho·∫£ng quan t√¢m, tƒÉng t∆∞∆°ng ph·∫£n c·ª•c b·ªô.
                """)
        
        # L√Ω thuy·∫øt cho c√¢n b·∫±ng histogram
        if histogram_option != "Kh√¥ng ch·ªçn":
            if "Histogram to√†n c·ª•c" in histogram_option:
                st.info(f"""
                **{histogram_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = T(r) = (L-1) √ó ‚à´‚ÇÄ ≥ p·µ£(w)dw
                Trong ƒë√≥: L l√† s·ªë m·ª©c x√°m, p·µ£(w) l√† PDF c·ªßa ·∫£nh g·ªëc
                
                **üéØ ·ª®ng d·ª•ng:** C√¢n b·∫±ng histogram cho to√†n b·ªô ·∫£nh
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n to√†n c·ª•c, ph√¢n b·ªë ƒë·ªÅu m·ª©c x√°m
                """)
            elif "CLAHE" in histogram_option:
                st.info(f"""
                **{histogram_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = T(r) v·ªõi T(r) ƒë∆∞·ª£c t√≠nh tr√™n t·ª´ng tile nh·ªè
                Clip limit: gi·ªõi h·∫°n ƒë·ªô tƒÉng histogram ƒë·ªÉ tr√°nh nhi·ªÖu
                
                **üéØ ·ª®ng d·ª•ng:** C√¢n b·∫±ng histogram th√≠ch ·ª©ng, x·ª≠ l√Ω ·∫£nh c√≥ v√πng s√°ng/t·ªëi kh√°c nhau
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n c·ª•c b·ªô, gi·ªØ chi ti·∫øt t·ªët h∆°n
                """)
            elif "T·ª± vi·∫øt" in histogram_option:
                st.info(f"""
                **{histogram_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¥ng th·ª©c: s = T(r) = (L-1) √ó (CDF(r) - CDF_min) / (CDF_max - CDF_min)
                Trong ƒë√≥: CDF l√† h√†m ph√¢n ph·ªëi t√≠ch l≈©y
                
                **üéØ ·ª®ng d·ª•ng:** Hi·ªÉu r√µ thu·∫≠t to√°n c√¢n b·∫±ng histogram
                
                **‚ú® C·∫£i thi·ªán:** T∆∞∆°ng t·ª± histogram to√†n c·ª•c, nh∆∞ng t·ª± implement
                """)
        
        # L√Ω thuy·∫øt cho ·ª©ng d·ª•ng th·ª±c t·∫ø
        if app_option != "Kh√¥ng ch·ªçn":
            if "bi·ªÉn s·ªë xe" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                S·ª≠ d·ª•ng CLAHE ƒë·ªÉ c√¢n b·∫±ng histogram th√≠ch ·ª©ng
                Gaussian blur ƒë·ªÉ l√†m m·ªãn nhi·ªÖu
                TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n v·ªõi alpha v√† beta
                
                **üéØ ·ª®ng d·ª•ng:** Ti·ªÅn x·ª≠ l√Ω ·∫£nh bi·ªÉn s·ªë xe tr∆∞·ªõc khi nh·∫≠n d·∫°ng k√Ω t·ª± (OCR)
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n, l√†m m·ªãn nhi·ªÖu, chu·∫©n b·ªã cho b∆∞·ªõc ti·∫øp theo
                """)
            elif "v·ªá tinh" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                Chuy·ªÉn sang LAB color space
                C√¢n b·∫±ng histogram cho k√™nh L (ƒë·ªô s√°ng)
                TƒÉng ƒë·ªô b√£o h√≤a cho k√™nh a v√† b
                
                **üéØ ·ª®ng d·ª•ng:** C·∫£i thi·ªán ·∫£nh v·ªá tinh trong h·ªá th·ªëng th√¥ng tin ƒë·ªãa l√Ω (GIS)
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô s·∫Øc n√©t, c·∫£i thi·ªán m√†u s·∫Øc, d·ªÖ d√†ng ph√¢n t√≠ch ƒë·ªãa h√¨nh
                """)
            elif "√°nh s√°ng k√©m" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                Chuy·ªÉn sang HSV color space
                C√¢n b·∫±ng histogram cho k√™nh V (ƒë·ªô s√°ng)
                TƒÉng ƒë·ªô b√£o h√≤a k√™nh S
                
                **üéØ ·ª®ng d·ª•ng:** N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p trong ƒëi·ªÅu ki·ªán thi·∫øu s√°ng
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô s√°ng, gi·∫£m nhi·ªÖu, c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n
                """)
            elif "t√†i li·ªáu" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                C√¢n b·∫±ng histogram to√†n c·ª•c
                L√†m s·∫Øc n√©t v·ªõi kernel [[-1,-1,-1], [-1,9,-1], [-1,-1,-1]]
                TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n
                
                **üéØ ·ª®ng d·ª•ng:** C·∫£i thi·ªán ·∫£nh t√†i li·ªáu b·ªã m·ªù, nh√≤e
                
                **‚ú® C·∫£i thi·ªán:** L√†m s·∫Øc n√©t ch·ªØ, tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n, d·ªÖ ƒë·ªçc h∆°n
                """)
            elif "s√°ch c≈©" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                Chuy·ªÉn sang LAB color space
                C√¢n b·∫±ng histogram cho k√™nh L
                Gi·∫£m ƒë·ªô v√†ng (k√™nh b) v·ªõi alpha = 0.8
                
                **üéØ ·ª®ng d·ª•ng:** C·∫£i thi·ªán ·∫£nh s√°ch c≈©, gi·∫•y ·ªë v√†ng
                
                **‚ú® C·∫£i thi·ªán:** Gi·∫£m ƒë·ªô v√†ng, tƒÉng ƒë·ªô s·∫Øc n√©t, c·∫£i thi·ªán kh·∫£ nƒÉng ƒë·ªçc
                """)
            elif "h√≥a ƒë∆°n" in app_option:
                st.info(f"""
                **{app_option}:**
                
                **üìñ L√Ω thuy·∫øt:**
                CLAHE v·ªõi clip limit cao h∆°n (3.0) v√† tile nh·ªè h∆°n (4x4)
                L√†m s·∫Øc n√©t v·ªõi kernel
                TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n v·ªõi alpha = 1.4, beta = 5
                
                **üéØ ·ª®ng d·ª•ng:** C·∫£i thi·ªán ·∫£nh h√≥a ƒë∆°n, ch·ªØ nh·ªè
                
                **‚ú® C·∫£i thi·ªán:** TƒÉng ƒë·ªô s·∫Øc n√©t, c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n, d·ªÖ nh·∫≠n d·∫°ng
                """)
            
        
        # X·ª≠ l√Ω ·∫£nh
        if st.button("üöÄ X·ª≠ l√Ω ·∫£nh", type="primary"):
            with st.spinner("ƒêang x·ª≠ l√Ω ·∫£nh..."):
                results = {}
                
                # X·ª≠ l√Ω c√°c ch·ª©c nƒÉng ƒë∆∞·ª£c ch·ªçn
                if basic_option != "Kh√¥ng ch·ªçn":
                    if basic_option == "‚ö° Bi·∫øn ƒë·ªïi Gamma":
                        results[basic_option] = gamma_transform(gray, gamma_value)
                    else:
                        results[basic_option] = basic_processing[basic_option](gray)
                
                if histogram_option != "Kh√¥ng ch·ªçn":
                    results[histogram_option] = histogram_processing[histogram_option](gray)
                
                if app_option != "Kh√¥ng ch·ªçn":
                    results[app_option] = application_processing[app_option](image)
                
                if not results:
                    st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ch·ª©c nƒÉng x·ª≠ l√Ω!")
                    return
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.markdown("---")
                st.subheader("‚ú® K·∫øt qu·∫£ x·ª≠ l√Ω")
                
                # Hi·ªÉn th·ªã t·ª´ng k·∫øt qu·∫£
                for title, processed_image in results.items():
                    if processed_image is not None:
                        st.markdown(f"**{title}:**")
                        
                        # Ki·ªÉm tra n·∫øu l√† ch·ª©c nƒÉng c√¢n b·∫±ng histogram th√¨ hi·ªÉn th·ªã histogram so s√°nh
                        if any(keyword in title for keyword in ["Histogram", "CLAHE"]):
                            comparison_fig = plot_histogram_comparison(gray, processed_image, title)
                            st.pyplot(comparison_fig)
                            plt.close()
                        else:
                            # So s√°nh tr∆∞·ªõc/sau th√¥ng th∆∞·ªùng
                            comparison_fig = plot_comparison(gray, processed_image, title)
                            st.pyplot(comparison_fig)
                            plt.close()
                        
                        # Th·ªëng k√™
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.metric("ƒê·ªô t∆∞∆°ng ph·∫£n g·ªëc", f"{np.std(gray):.2f}")
                            st.metric("ƒê·ªô t∆∞∆°ng ph·∫£n sau x·ª≠ l√Ω", f"{np.std(processed_image):.2f}")
                        
                        with col2:
                            st.metric("ƒê·ªô s√°ng trung b√¨nh g·ªëc", f"{np.mean(gray):.2f}")
                            st.metric("ƒê·ªô s√°ng trung b√¨nh sau x·ª≠ l√Ω", f"{np.mean(processed_image):.2f}")
                        
                        # Download button
                        st.markdown(get_image_download_link(
                            processed_image, 
                            f"processed_{uploaded_file.name.split('.')[0]}_{title.replace(' ', '_')}.png", 
                            f"üì• T·∫£i ·∫£nh {title}"
                        ), unsafe_allow_html=True)
                        
                        st.markdown("---")
                
                # Ph√¢n t√≠ch tr∆∞·ªõc v√† sau cho ·ª©ng d·ª•ng th·ª±c t·∫ø
                if app_option != "Kh√¥ng ch·ªçn":
                    st.markdown("---")
                    st.subheader("üîç Ph√¢n t√≠ch tr∆∞·ªõc v√† sau x·ª≠ l√Ω")
                    
                    if "bi·ªÉn s·ªë xe" in app_option:
                        st.info("""
                        **üöó Ti·ªÅn x·ª≠ l√Ω ·∫£nh bi·ªÉn s·ªë xe - Ph√¢n t√≠ch:**
                        
                        **üìä Tr∆∞·ªõc x·ª≠ l√Ω:**
                        - ·∫¢nh g·ªëc c√≥ th·ªÉ b·ªã m·ªù, thi·∫øu ƒë·ªô t∆∞∆°ng ph·∫£n
                        - Nhi·ªÖu v√† b√≥ng m·ªù c√≥ th·ªÉ che khu·∫•t k√Ω t·ª±
                        - ƒê·ªô s√°ng kh√¥ng ƒë·ªÅu gi·ªØa c√°c v√πng
                        
                        **‚ú® Sau x·ª≠ l√Ω:**
                        - **CLAHE:** TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n c·ª•c b·ªô, l√†m n·ªïi b·∫≠t k√Ω t·ª±
                        - **Gaussian Blur:** L√†m m·ªãn nhi·ªÖu, gi·ªØ nguy√™n chi ti·∫øt quan tr·ªçng
                        - **TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n:** L√†m r√µ ranh gi·ªõi gi·ªØa k√Ω t·ª± v√† n·ªÅn
                        
                        **üéØ K·∫øt qu·∫£ mong ƒë·ª£i:**
                        - K√Ω t·ª± bi·ªÉn s·ªë r√µ r√†ng h∆°n, d·ªÖ nh·∫≠n d·∫°ng
                        - Gi·∫£m nhi·ªÖu v√† b√≥ng m·ªù
                        - TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n gi·ªØa ch·ªØ v√† n·ªÅn
                        """)
                    
                    elif "v·ªá tinh" in app_option:
                        st.info("""
                        **üõ∞Ô∏è C·∫£i thi·ªán ·∫£nh v·ªá tinh GIS - Ph√¢n t√≠ch:**
                        
                        **üìä Tr∆∞·ªõc x·ª≠ l√Ω:**
                        - ·∫¢nh v·ªá tinh c√≥ th·ªÉ b·ªã m·ªù, thi·∫øu ƒë·ªô s·∫Øc n√©t
                        - M√†u s·∫Øc kh√¥ng t·ª± nhi√™n, thi·∫øu ƒë·ªô b√£o h√≤a
                        - ƒê·ªô t∆∞∆°ng ph·∫£n th·∫•p, kh√≥ ph√¢n bi·ªát ƒë·ªãa h√¨nh
                        
                        **‚ú® Sau x·ª≠ l√Ω:**
                        - **LAB Color Space:** T√°ch ri√™ng ƒë·ªô s√°ng v√† m√†u s·∫Øc
                        - **CLAHE cho k√™nh L:** TƒÉng ƒë·ªô s·∫Øc n√©t v√† ƒë·ªô t∆∞∆°ng ph·∫£n
                        - **TƒÉng ƒë·ªô b√£o h√≤a:** L√†m n·ªïi b·∫≠t ƒë·∫∑c ƒëi·ªÉm ƒë·ªãa h√¨nh
                        
                        **üéØ K·∫øt qu·∫£ mong ƒë·ª£i:**
                        - ƒê·ªãa h√¨nh r√µ r√†ng h∆°n, d·ªÖ ph√¢n t√≠ch
                        - M√†u s·∫Øc t·ª± nhi√™n v√† sinh ƒë·ªông
                        - TƒÉng kh·∫£ nƒÉng nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng
                        """)
                    
                    elif "√°nh s√°ng k√©m" in app_option:
                        st.info("""
                        **üåô N√¢ng cao ·∫£nh √°nh s√°ng k√©m - Ph√¢n t√≠ch:**
                        
                        **üìä Tr∆∞·ªõc x·ª≠ l√Ω:**
                        - ·∫¢nh t·ªëi, thi·∫øu chi ti·∫øt ·ªü v√πng b√≥ng
                        - Nhi·ªÖu cao do ISO cao trong ƒëi·ªÅu ki·ªán thi·∫øu s√°ng
                        - M√†u s·∫Øc b·ªã m·∫•t ƒëi, thi·∫øu ƒë·ªô b√£o h√≤a
                        
                        **‚ú® Sau x·ª≠ l√Ω:**
                        - **HSV Color Space:** T√°ch ri√™ng m√†u s·∫Øc v√† ƒë·ªô s√°ng
                        - **CLAHE cho k√™nh V:** TƒÉng ƒë·ªô s√°ng v√πng t·ªëi, gi·ªØ chi ti·∫øt
                        - **TƒÉng ƒë·ªô b√£o h√≤a:** Kh√¥i ph·ª•c m√†u s·∫Øc t·ª± nhi√™n
                        
                        **üéØ K·∫øt qu·∫£ mong ƒë·ª£i:**
                        - V√πng t·ªëi ƒë∆∞·ª£c l√†m s√°ng, hi·ªÉn th·ªã chi ti·∫øt
                        - Gi·∫£m nhi·ªÖu v√† tƒÉng ƒë·ªô m∆∞·ª£t m√†
                        - M√†u s·∫Øc ƒë∆∞·ª£c kh√¥i ph·ª•c v√† tƒÉng c∆∞·ªùng
                        """)
    
    else:
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        st.info("üëÜ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:** T·∫£i ·∫£nh l√™n t·ª´ sidebar b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω")
        
        st.markdown("---")
        
        # Gi·ªõi thi·ªáu c√°c ch·ª©c nƒÉng
        st.subheader("üéØ C√°c ch·ª©c nƒÉng ch√≠nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### üîß X·ª≠ l√Ω ·∫£nh c∆° b·∫£n
            - **üîÑ ·∫¢nh √¢m (Negative):** T·∫°o ·∫£nh √¢m, h·ªØu √≠ch trong y t·∫ø
            - **üìä Bi·∫øn ƒë·ªïi Logarit:** N√©n ƒë·ªông d·∫£i, x·ª≠ l√Ω ·∫£nh t∆∞∆°ng ph·∫£n cao
            - **‚ö° Bi·∫øn ƒë·ªïi Gamma:** ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng theo h√†m m≈©
            - **üìà Bi·∫øn ƒë·ªïi Piecewise-linear:** X·ª≠ l√Ω v√πng s√°ng/t·ªëi kh√°c nhau
            
            ### üìä C√¢n b·∫±ng Histogram
            - **üìä Histogram to√†n c·ª•c:** C√¢n b·∫±ng to√†n b·ªô ·∫£nh
            - **üéØ CLAHE:** C√¢n b·∫±ng th√≠ch ·ª©ng, gi·ªØ chi ti·∫øt t·ªët h∆°n
            - **‚úèÔ∏è T·ª± vi·∫øt h√†m:** Hi·ªÉu r√µ thu·∫≠t to√°n
            """)
        
        with col2:
            st.markdown("""
            ### üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø
            - **üöó Bi·ªÉn s·ªë xe:** Ti·ªÅn x·ª≠ l√Ω cho OCR
            - **üõ∞Ô∏è ·∫¢nh v·ªá tinh:** C·∫£i thi·ªán cho GIS
            - **üåô √Ånh s√°ng k√©m:** N√¢ng cao ch·∫•t l∆∞·ª£ng
            """)
        
        st.markdown("---")
        
        # Y√™u c·∫ßu b√†i t·∫≠p
        st.subheader("üìã Y√™u c·∫ßu b√†i t·∫≠p")
        st.markdown("""
        **Ph·∫ßn 3: ·ª®ng d·ª•ng bi·∫øn ƒë·ªïi ·∫£nh c∆° b·∫£n trong th·ª±c t·∫ø**
        
        **üîß X·ª≠ l√Ω ·∫£nh c∆° b·∫£n:**
        1. **Negative Image (·∫¢nh √¢m)**
        2. **Log Transformation (Bi·∫øn ƒë·ªïi log)**
        3. **Power-law / Gamma Correction**
        4. **Piecewise-linear Transformation**
        
        **üìä Thu·∫≠t to√°n c√¢n b·∫±ng histogram:**
        5. **Histogram Equalization to√†n c·ª•c**
        6. **Adaptive Histogram Equalization (CLAHE)**
        7. **T·ª± vi·∫øt h√†m c√¢n b·∫±ng histogram**
        
        **üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø:**
        8. **Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe**
        9. **C·∫£i thi·ªán ·∫£nh v·ªá tinh trong GIS**
        10. **N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p trong ƒëi·ªÅu ki·ªán √°nh s√°ng k√©m**
        
        **M·ª•c ti√™u:** Ph√¢n t√≠ch k·∫øt qu·∫£ v√† so s√°nh tr∆∞·ªõc/sau x·ª≠ l√Ω
        """)
    


if __name__ == "__main__":
    main() 